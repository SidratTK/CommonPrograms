% Retrieves impedance data. If not available, this program saves impedance
% data from rawData to subjectName/gridType/expDate. Displays the impedance
% information if displayFlag is set. EEGLab must be installed in that case.
% capType must be available in Montages/layouts folder and should be in the
% search path of Matlab.

function [electrodeNames,electrodeImpedances] = getImpedanceDataEEG(subjectName,expDate,folderSourceString,gridType,impedanceTag,displayFlag,capType)

if ~exist('gridType','var');        gridType = 'EEG';                   end
if ~exist('impedanceTag','var');    impedanceTag = 'ImpedanceStart';    end
if ~exist('displayFlag','var');     displayFlag = 1;                    end
if ~exist('capType','var');         capType = 'actiCap64';              end

folderNameSave = fullfile(folderSourceString,'data',subjectName,gridType,expDate);
fileNameSave = fullfile(folderNameSave,'impedanceData.mat');

if exist(fileNameSave,'file')
    disp(['Loading saved impedance data from ' fileNameSave]);
    e = load(fileNameSave);
    electrodeNames = e.electrodeNames;
    electrodeImpedances = e.electrodeImpedances;
else
    folderNameRawData = fullfile(folderSourceString,'data','rawData',[subjectName expDate]);
    filenameImpedance = fullfile(folderNameRawData,[subjectName expDate impedanceTag '.txt']);
    
    % Read BrainAmp impedance values from text file
    % Modified from script auto-generated by MATLAB on 2018/01/03 12:29:29
    % Format string for each line of text:
    formatSpec = '%1s%3s%9s%5s%12s%2s%3s%s%[^\n\r]';
    
    % Open the text file.
    fileID = fopen(filenameImpedance,'r');
    
    % Read columns of data according to format string.
    textscan(fileID, '%[^\n\r]', 0, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'ReturnOnError', false);
    
    % Remove white space around all cell columns.
    dataArray{1} = strtrim(dataArray{1});
    dataArray{2} = strtrim(dataArray{2});
    dataArray{4} = strtrim(dataArray{4});
    dataArray{8} = strtrim(dataArray{8});
    
    % Close the text file.
    fclose(fileID);
    clear fileID
    
    firstColumn = dataArray{:, 1};
    startRow = find(strcmp(firstColumn,'#'),1,'first');
    endRow = find(strcmp(firstColumn,'#'),1,'last');
    electrodeNames = dataArray{:, 4}(startRow:endRow);
    electrodeImpedances = cellfun(@str2num,dataArray{:, 8}(startRow:endRow),'uniformOutput',0);
    electrodeImpedances(cellfun(@isempty,electrodeImpedances)) = {NaN};
    
    electrodeImpedances = cell2mat(electrodeImpedances);
    save(fileNameSave,'electrodeImpedances','electrodeNames');
end

if displayFlag
    
    electrodeSize = 35;
    impedanceCutoff = 25; % Impedance below this will be marked in green, above will be marked in red.
    
    cL = load([capType '.mat']);
    chanlocs = cL.chanlocs;
    cL = load([capType 'Labels.mat']);
    labels = cL.montageLabels(:,2);
    
    numElectrodes = length(chanlocs);
    
    highImpedanceElectrodeList = [];
    unidentifiedElectrodeList = [];
    for i=1:numElectrodes
        pos = find(strcmp(labels{i},electrodeNames));
        
        if isempty(pos)
            disp([labels{i} ' not found among electrodeNames']);
            unidentifiedElectrodeList = cat(2,unidentifiedElectrodeList,i);
        else
            imp = electrodeImpedances(pos);
            newLabel = [num2str(i) '-' labels{i} '\newline' num2str(imp) 'k\Omega'];
            chanlocs(i).labels = newLabel;
            
            if isnan(imp) || (imp>impedanceCutoff)
                highImpedanceElectrodeList = cat(2,highImpedanceElectrodeList,i);
            end
        end
    end
    
    topoplot(zeros(1,numElectrodes),chanlocs,'electrodes','on','style','map','emarker2',{setdiff(1:numElectrodes,union(highImpedanceElectrodeList,unidentifiedElectrodeList)),'o','g',electrodeSize});
    topoplot(zeros(1,numElectrodes),chanlocs,'electrodes','on','style','map','emarker2',{highImpedanceElectrodeList,'o','r',electrodeSize});
    topoplot(zeros(1,numElectrodes),chanlocs,'electrodes','on','style','map','emarker2',{unidentifiedElectrodeList,'o','m',electrodeSize});
    topoplot([],chanlocs,'electrodes','labels','style','blank');
end
end